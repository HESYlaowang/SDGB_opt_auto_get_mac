import re
import sys
import time
import requests
import urllib3
import os
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from tqdm import tqdm
import shutil
import traceback

def enc(key, iv, data):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return cipher.encrypt(pad(data, 16))

def dec(key, iv, data):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return unpad(cipher.decrypt(data), 16)

def get_download_url():
    key = bytes([47, 63, 106, 111, 43, 34, 76, 38, 92, 67, 114, 57, 40, 61, 107, 71])
    iv = bytes(16)
    ua = 'SDGB;Windows/Lite'
    content = b'title_id=SDGB&title_ver=1.50&client_id=A63E01C2805&token=205648745'
    payload = bytes(16) + content
    encrypted = enc(key, iv, payload)
    http = urllib3.PoolManager()
    try:
        r = http.request(
            'POST',
            'http://at.sys-allnet.cn/net/delivery/instruction',
            body=encrypted,
            headers={'User-Agent': ua, 'Pragma': 'DFI'}
        )
        decrypted = dec(key, r.data[:16], r.data[16:])
        decrypted_str = decrypted.decode('utf-8')
        if '|' in decrypted_str:
            url_start = decrypted_str.find('|') + 1
            return decrypted_str[url_start:].strip()
        elif 'uri=' in decrypted_str:
            url_start = decrypted_str.find('uri=') + 4
            return decrypted_str[url_start:].strip()
        else:
            return decrypted_str.strip()
    except Exception as e:
        print(f"获取下载URL失败: {e}")
        sys.exit(1)

def download_file(url, filename):
    try:
        response = requests.get(url, stream=True)
        response.raise_for_status()
        total_size = int(response.headers.get('content-length', 0))
        progress_bar = tqdm(total=total_size, unit='B', unit_scale=True, desc=filename)
        with open(filename, 'wb') as f:
            start_time = time.time()
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
                    progress_bar.update(len(chunk))
                    elapsed = time.time() - start_time
                    speed = (progress_bar.n / 1024) / elapsed if elapsed > 0 else 0
                    progress_bar.set_postfix(speed=f"{speed:.2f}KB/s")
        progress_bar.close()
        print(f"\n{filename} 下载完成！大小: {total_size // 1024}KB")
        return True
    except Exception as e:
        print(f"\n下载失败: {e}")
        return False

def extract_document_names(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        pattern = r'INSTALL\d+=\s*(https?://\S+)'
        urls = re.findall(pattern, response.text)
        filenames = [url.split('/')[-1] for url in urls]
        return filenames, urls
    except Exception as e:
        print(f"解析文件列表失败: {e}")
        sys.exit(1)

def download_file(url, filename):
    try:
        # 确保目录存在
        os.makedirs(os.path.dirname(filename), exist_ok=True)

        response = requests.get(url, stream=True)
        response.raise_for_status()
        total_size = int(response.headers.get('content-length', 0))
        progress_bar = tqdm(total=total_size, unit='B', unit_scale=True, desc=os.path.basename(filename))
        with open(filename, 'wb') as f:
            start_time = time.time()
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
                    progress_bar.update(len(chunk))
                    elapsed = time.time() - start_time
                    speed = (progress_bar.n / 1024) / elapsed if elapsed > 0 else 0
                    progress_bar.set_postfix(speed=f"{speed:.2f}KB/s")
        progress_bar.close()
        print(f"\n{filename} 下载完成！大小: {total_size // 1024}KB")
        return True
    except Exception as e:
        print(f"\n下载失败: {e}")
        return False

def main():
    try:
        print("\n======== SDGB DOWNLOADORDER MADE BY R1KKASAMA ========")
        print("======== THE CODE IS GENERATED BY DEEPSEEK R1 ========")
        print("\n======== MACOS VERSION MODIFIED BY LA0W4NG ========")
        print("\n开始获取...")
        url = get_download_url()
        if not url:
            print("未能获取下载地址，程序终止")
            return
        print(f"已获取到下载页面地址: {url}")
        print("开始解析可下载文件列表...")
        files, urls = extract_document_names(url)
        if not files:
            print("未找到可下载文件")
            return
        print("\n======== SDGB可用OPT下载列表 ========")
        for i, name in enumerate(files):
            print(f"{i + 1}. {name}")
        print(f"\n当前最新版本: {files[0]}")

        # 新建opt文件夹
        save_dir = "opt"
        os.makedirs(save_dir, exist_ok=True)

        while True:
            try:
                choice = input("\n请输入要下载的文件序号 (输入0退出): ")
                if choice == '0':
                    print("程序退出")
                    return
                choice = int(choice)
                if 1 <= choice <= len(files):
                    target_url = urls[choice - 1]
                    filename = files[choice - 1]
                    full_path = os.path.join(save_dir, filename)  # 保存到opt目录下
                    print(f"\n开始下载: {filename} 到 {full_path}")
                    download_file(target_url, full_path)
                    return
                else:
                    print(f"无效的选择，请输入1-{len(files)}之间的数字")
            except ValueError:
                print("请输入有效的数字")
    except Exception as e:
        print("程序发生未处理异常:")
        traceback.print_exc()

if __name__ == "__main__":
    main()
